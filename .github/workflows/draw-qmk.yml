# adjusted for qmk based on https://github.com/caksoylar/keymap-drawer/blob/main/.github/workflows/draw-zmk.yml
name: Draw QMK keymaps
on:
  workflow_call:
    inputs:
      keymap_patterns:
        description: 'Path specification for keymaps to be parsed'
        default: 'keyboards/**/keymaps/*/keymap.c'
        required: false
        type: string
      config_path:
        description: 'Path to the keymap-drawer configuration file, ignored if non-existent'
        default: 'keymap_drawer.config.yaml'
        required: false
        type: string
      output_folder:
        description: 'Output folder for SVG and YAML files'
        default: 'keymap-drawer'
        required: false
        type: string
      json_path:
        description: 'Path containing <keymap>.json physical layout description files, ignored if non-existent'
        default: 'config'
        required: false
        type: string
      parse_args:
        description: "Map of keyboard names to extra `keymap parse` args, e.g. `corne:'--layer-names Def Lwr Rse Fun'`"
        default: ''
        required: false
        type: string
      draw_args:
        description: "Map of keyboard names to extra `keymap draw` args, e.g. `corne:'-k corne_rotated -l LAYOUT_split_3x5_3'`"
        default: ''
        required: false
        type: string
      commit_message:
        description: 'Commit message for updated images. Ignored if `amend_commit` is `true`.'
        default: 'keymap-drawer render'
        required: false
        type: string
      amend_commit:
        description: 'Whether to amend the last commit instead of creating a new one. Make sure you understand the implications of rewriting the branch history if you use this option!'
        default: false
        required: false
        type: boolean
      install_branch:
        description: 'Install keymap-drawer from a git branch, use empty for pypi release (default)'
        default: ''
        required: false
        type: string
      install_repo:
        description: 'Install keymap-drawer from a different git remote, primarily for testing changes using a keymap-drawer fork. Ignored if `install_branch` is unset/empty.'
        default: 'https://github.com/caksoylar/keymap-drawer.git'
        required: false
        type: string
      destination:
        description: 'Add the output files to a commit, as artifacts or both, values: `commit`, `artifact`, `both`'
        default: 'commit'
        required: false
        type: string
      artifact_name:
        description: 'Name of the produced artifact containing SVG and YAML outputs. Ignored if `destination` is `commit`.'
        default: 'drawings'
        required: false
        type: string
      fail_on_error:
        description: 'Fail the action if an error occurs during parse/draw'
        default: false
        required: false
        type: boolean
      qmk_repo:
        description: 'qmk_firmware repo to build against'
        default: 'qmk/qmk_firmware'
        required: false
        type: string
      qmk_ref:
        description: 'qmk_firmware branch to build against'
        default: 'master'
        required: false
        type: string
    outputs:
      drawings:
        description: 'Archive with keymap in YAML and drawing in SVG formats'
        value: ${{ jobs.draw.outputs.drawings }}

jobs:
  draw:
    runs-on: ubuntu-latest
    outputs:
      drawings: ${{ steps.artifact-upload-step.outputs.artifact-id }}
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          # So the reference to the parent commit is available when amending
          # See:
          # - https://github.com/stefanzweifel/git-auto-commit-action#using---amend-and---no-edit-as-commit-options
          # - https://github.com/stefanzweifel/git-auto-commit-action/issues/159#issuecomment-845347950
          # - https://github.com/actions/checkout
          token: ${{ github.token}}
          fetch-depth: ${{ (inputs.amend_commit == true && 2) || 1 }}
          submodules: recursive

      - name: Install keymap-drawer (pypi)
        if: inputs.install_branch == ''
        run: python3 -m pip install keymap-drawer

      - name: Install keymap-drawer (git)
        if: inputs.install_branch != ''
        run: python3 -m pip install "git+${{ inputs.install_repo }}@${{ inputs.install_branch }}"

      #QMK setup for c2json utility to get json keymaps
      - name: Check if qmk_firmware exists
        id: check_files
        uses: andstor/file-existence-action@v2
        with:
          files: qmk_firmware

      - name: Checkout QMK Firmware
        uses: actions/checkout@v3
        if: steps.check_files.outputs.files_exists == 'false'
        with:
          token: ${{ github.token }}
          path: qmk_firmware
          repository: ${{ inputs.qmk_repo || 'qmk/qmk_firmware' }}
          ref: ${{ inputs.qmk_ref || 'master' }}
          submodules: recursive

      - name: Install QMK CLI
        run: |
          python3 -m pip install --upgrade qmk
          python3 -m pip install -r qmk_firmware/requirements.txt

      - name: Configure QMK CLI
        run: |
          qmk config userspace_compile.parallel=$(nproc 2>/dev/null || sysctl -n hw.ncpu 2>/dev/null || getconf _NPROCESSORS_ONLN 2>/dev/null)
          qmk config user.qmk_home=$GITHUB_WORKSPACE/qmk_firmware
          qmk config user.overlay_dir=$GITHUB_WORKSPACE

      - name: Validate userspace
        run: |
          qmk userspace-doctor

      - name: Draw keymaps
        id: draw
        run: |
          get_args() {
              local keyboard=$2
              eval set -- "$1"
              for arg; do
                  local key=${arg%%:*}
                  local val=${arg#*:}
                  if [ "$key" = "$keyboard" ]; then
                      echo "$val"
                      break
                  fi
              done
          }

          declare -a DRAWINGS
          error_occurred=0
          mkdir -p "${{ inputs.output_folder }}"

          config_path="${{ inputs.config_path }}"
          [ -e "$config_path" ] && config_arg=(-c "$config_path") || config_arg=()
          echo "INFO: using config args: ${config_arg[@]}"

          # Use find to locate the keymap files
          keymap_files=$(find keyboards -type f -name 'keymap.c')
          for keymap_file in $keymap_files; do
              keyboard=$(echo "$keymap_file" | sed -E 's|keyboards/(.*)/keymaps.*|\1|')
              keymap=$(basename $(dirname "$keymap_file"))
              echo "INFO: drawing for $keyboard/$keymap"

              parse_args=$(get_args "${{ inputs.parse_args }}" "$keyboard")
              echo "INFO:   got extra parse args: $parse_args"
              draw_args=$(get_args "${{ inputs.draw_args }}" "$keyboard")
              echo "INFO:   got extra draw args: $draw_args"

              qmk c2json -kb "$keyboard" -km "$keymap" > "${{ inputs.output_folder }}/$keyboard_$keymap.json" \
              && keymap "${config_arg[@]}" parse -q "${{ inputs.output_folder }}/$keyboard_$keymap.json" $parse_args >"${{ inputs.output_folder }}/$keyboard_$keymap.yaml" \
              && keymap "${config_arg[@]}" draw "${{ inputs.output_folder }}/$keyboard_$keymap.yaml" $draw_args >"${{ inputs.output_folder }}/$keyboard_$keymap.svg" \
              || {
                  echo "ERROR: parsing or drawing failed for $keyboard/$keymap!"
                  error_occurred=1
              }
              DRAWINGS+=(\"${{ inputs.output_folder }}/$keyboard_$keymap.yaml\" \"${{ inputs.output_folder }}/$keyboard_$keymap.svg\")
          done
          IFS=','
          echo "DRAWINGS=[${DRAWINGS[*]}]" >> $GITHUB_OUTPUT
          unset IFS

          if [ "${{ inputs.fail_on_error }}" == "true" ] && [ $error_occurred -eq 1; then
              exit 1
          fi

      - name: Get last commit message
        id: last_commit_message
        if: inputs.amend_commit == true && (inputs.destination == 'commit' || inputs.destination == 'both')
        run: |
          echo "msg=$(git log -1 --pretty=%s)" >> $GITHUB_OUTPUT

      - name: Commit updated images
        if: ( inputs.destination == 'commit' || inputs.destination == 'both' )
        uses: stefanzweifel/git-auto-commit-action@v5
        with:
          file_pattern: '${{ inputs.output_folder }}/*.svg ${{ inputs.output_folder }}/*.yaml'
          # So the previous commit is amended instead of creating a new one when desired
          # See:
          # - https://github.com/stefanzweifel/git-auto-commit-action#using---amend-and---no-edit-as-commit-options
          # - https://github.com/stefanzweifel/git-auto-commit-action/issues/159#issuecomment-845347950
          # - https://github.com/actions/checkout
          commit_message: '${{ (inputs.amend_commit == true && steps.last_commit_message.outputs.msg) || inputs.commit_message }}'
          commit_options: "${{ (inputs.amend_commit == true && '--amend --no-edit') || '' }}"
          push_options: "${{ (inputs.amend_commit == true && '--force-with-lease') || '' }}"
          skip_fetch: ${{ inputs.amend_commit == true }}

      - name: Artifact upload
        id: artifact-upload-step
        if: ( inputs.destination == 'artifact' || inputs.destination == 'both' )
        uses: actions/upload-artifact@v4
        with:
          name: '${{ inputs.artifact_name }}'
          path: |
            ${{ join(fromJSON(steps.draw.outputs.DRAWINGS), '
            ') }}
